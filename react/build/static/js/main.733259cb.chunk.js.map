{"version":3,"sources":["components/Home/logo.png","components/TinderCard/TinderCard.js","components/Rooms/JoinRoom.js","components/Home/Home.js","components/NotFound/NotFound.js","components/Rooms/CreateRoom.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","name","url","TinderCardComponent","characters","useState","lastDirection","setLastDirection","className","map","character","key","onSwipe","dir","direction","nameToDelete","console","log","onCardLeftScreen","preventSwipe","style","backgroundImage","JoinRoomForm","props","state","roomNumber","handleChange","bind","submit","event","this","setState","target","value","alert","preventDefault","onSubmit","type","placeholder","onChange","required","maxLength","pattern","onTouchStart","React","Component","Home","history","push","src","logo","alt","JoinRoom","onClick","e","goCreateRoom","PageNotFound","href","RoomNotFound","CreateRoom","currentCity","longitude","latitude","parentThis","navigator","geolocation","getCurrentPosition","position","coords","fetch","expressServer","method","headers","Accept","credentials","then","res","status","json","resJSON","long_name","catch","rel","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.733259cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a0068553.png\";","import React, { useState } from 'react';\nimport './TinderCard.css';\nimport TinderCard from 'react-tinder-card'\n\nconst db = [\n    {\n        name: 'Richard Hendricks',\n        url: './img/richard.jpg'\n    },\n    {\n        name: 'Erlich Bachman',\n        url: './img/erlich.jpg'\n    },\n    {\n        name: 'Monica Hall',\n        url: './img/monica.jpg'\n    },\n    {\n        name: 'Jared Dunn',\n        url: './img/jared.jpg'\n    },\n    {\n        name: 'Dinesh Chugtai',\n        url: './img/dinesh.jpg'\n    }\n]\n\nfunction TinderCardComponent() {\n    const characters = db;\n    const [lastDirection, setLastDirection] = useState();\n\n    const swiped = (direction, nameToDelete) => {\n        console.log('removing: ' + nameToDelete)\n        setLastDirection(direction)\n    }\n\n    const outOfFrame = (name) => {\n        console.log(name + ' left the screen!')\n    }\n\n    return (\n        <div>\n            {/* <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n            <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' /> */}\n            <h1>React Tinder Card</h1>\n            <div className='cardContainer'>\n                {characters.map((character) =>\n                    <TinderCard\n                        className='swipe'\n                        key={character.name}\n                        onSwipe={(dir) => swiped(dir, character.name)}\n                        onCardLeftScreen={() => outOfFrame(character.name)}\n                        preventSwipe={['up', 'down']}>\n                        <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\n                            <h3>{character.name}</h3>\n                        </div>\n                    </TinderCard>\n                )}\n            </div>\n            {lastDirection ? <h2 className='infoText'>You swiped {lastDirection}</h2> :\n                <h2 className='infoText'>No direction swiped</h2>}\n        </div >\n    );\n}\n\nexport default TinderCardComponent;","import React from 'react';\n\nclass JoinRoomForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomNumber: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.submit = this.submit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ roomNumber: event.target.value });\n    }\n\n    submit(event) {\n        // ... use email and acceptedTerms in an ajax request or similar ...\n        alert('You submitted this room number:' + this.state.roomNumber);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submit}>\n                <input\n                    type=\"text\"\n                    value={this.state.roomNumber}\n                    placeholder=\"Room Number\"\n                    onChange={this.handleChange}\n                    required\n                    maxLength=\"4\"\n                    pattern=\"[0-9]*\"\n                />\n                <button onTouchStart=\"\">\n                    JOIN ROOM\n                </button>\n            </form >\n        )\n    }\n}\n\nexport default JoinRoomForm;","import React from 'react';\nimport JoinRoomForm from '../Rooms/JoinRoom';\nimport logo from './logo.png';\n\n// const logo = require('/public/img/logo.png');\n\nclass Home extends React.Component {\n\n    goCreateRoom() {\n        this.props.history.push(\"/create\");\n    }\n\n    render() {\n        return (\n            <div className=\"main-page\" >\n                <img src={logo} className=\"logo\" alt=\"Chicken Tinder Icon\" />\n                <JoinRoomForm />\n                <button\n                    onTouchStart=\"\"\n                    onClick={e => {\n                        this.goCreateRoom();\n                    }}>\n                    NEW ROOM\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\n\nfunction PageNotFound() {\n    return (\n        <div>\n            <h1>Page Not Found</h1>\n            <a href=\"/\">Go back</a>\n        </div>\n    );\n}\n\nfunction RoomNotFound() {\n    return (\n        <div>\n            <h1>Room Not Found</h1>\n            <p>Please make sure you've entered a valid room ID in the URL   </p>\n            <a href=\"/\">Go back</a>\n        </div>\n    );\n}\n\nexport { PageNotFound, RoomNotFound };","import React from 'react';\n\nlet expressServer = process.env.REACT_APP_EXPRESS_SERVER;\n\nclass CreateRoom extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentCity: 'Retrieving Location...',\n            longitude: 0,\n            latitude: 0,\n        };\n    }\n\n    componentDidMount() {\n        let parentThis = this;\n        navigator.geolocation.getCurrentPosition(function (position) {\n            let longitude = position.coords.longitude;\n            let latitude = position.coords.latitude;\n            parentThis.setState({ longitude: position.coords.longitude });\n            parentThis.setState({ latitude: position.coords.latitude });\n            fetch(expressServer + \"/api/location?longitude=\" + longitude + \"&latitude=\" + latitude, {\n                method: \"get\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                },\n                credentials: \"include\"\n            }).then(res => {\n                if (res.status === 200) {\n                    res.json().then(resJSON => {\n                        let state = { currentCity: resJSON.long_name }\n                        parentThis.setState(state);\n                    });\n                } else {\n                    parentThis.setState({ currentCity: \"Cannot get location\" });\n                }\n            }).catch((e) => {\n                parentThis.setState({ currentCity: \"Cannot get location\" });\n                console.log(e);\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"main-page\">\n                <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n\n                {/* <img src={logo} className=\"logo\" /> */}\n                <h2> Create Room </h2>\n                <p>{this.state.currentCity}</p>\n                <button\n                    onTouchStart=\"\">\n                    READY\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default CreateRoom;","import React from 'react';\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport TinderCardComponent from './components/TinderCard/TinderCard';\nimport Home from './components/Home/Home';\nimport { RoomNotFound, PageNotFound } from './components/NotFound/NotFound';\nimport CreateRoom from './components/Rooms/CreateRoom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/rooms/:id\" component={TinderCardComponent} />\n          <Route exact path='/' component={Home} />\n          <Route exact path='/create' component={CreateRoom} />\n          <Route exact path=\"/rooms\" component={RoomNotFound} />\n          <Route component={PageNotFound} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}