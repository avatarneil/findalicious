{"version":3,"sources":["components/Rooms/JoinRoom.js","components/Home/Home.js","components/NotFound/NotFound.js","components/Rooms/RadiusButtons.js","components/Rooms/CreateRoom.js","components/Rooms/Lobby.js","components/TinderCard/TinderCard.js","components/Swiping/Swiping.js","App.js","serviceWorker.js","index.js"],"names":["JoinRoomForm","props","state","roomNumber","handleChange","bind","goToRoom","event","this","setState","target","value","roomURL","history","push","onSubmit","submit","ref","node","setWrapperRef","className","type","placeholder","onChange","required","maxLength","pattern","onTouchStart","style","backgroundColor","onClick","React","Component","withRouter","Home","formShowing","src","alt","JoinRoom","e","PageNotFound","to","icon","faArrowAltCircleLeft","size","RoomNotFound","RadiusButtons","active","radius","updateRadius","buttonStyle","width","display","fontSize","buttonActiveStyle","fontWeight","boxShadow","transform","paddingBottom","paddingTop","_handleClick","expressServer","process","CreateRoom","currentCity","longitude","latitude","locationRetrieved","loading","createJoinRoom","parentThis","fetch","method","headers","Accept","then","geolocationResult","status","json","Promise","reject","geolocationResultJSON","location","lng","lat","geocodeResult","geocodeResultJSON","long_name","catch","console","log","body","JSON","stringify","city","result","resultJSON","alert","spinner","text","href","rel","faLocationArrow","margin","disabled","Lobby","match","params","participants","joinRoom","updateStateInfo","startSwiping","socket","on","data","parse","participantsObjectArray","participantsArray","i","length","socketID","emit","padding","db","name","url","TinderCardComponent","characters","useState","lastDirection","setLastDirection","map","character","key","onSwipe","dir","direction","nameToDelete","onCardLeftScreen","preventSwipe","backgroundImage","Swiping","restaurants","placeID","errMsg","restaurantName","restaurant","swiped","outOfFrame","photoURL","io","connect","reconnection","App","exact","path","render","component","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.82feaf71.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass JoinRoomForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomNumber: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.goToRoom = this.goToRoom.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ roomNumber: event.target.value });\n    }\n\n    goToRoom() {\n        let roomURL = \"/rooms/\" + this.state.roomNumber;\n        this.props.history.push(roomURL);\n    }\n\n    render() {\n        return (\n            < form onSubmit={this.submit} ref={(node) => this.setWrapperRef = node}>\n                <input className=\"pop-up\"\n                    type=\"text\"\n                    value={this.state.roomNumber}\n                    placeholder=\"Room Number\"\n                    onChange={this.handleChange}\n                    required\n                    maxLength=\"4\"\n                    pattern=\"[0-9]*\"\n                />\n                <button\n                    onTouchStart=\"\"\n                    style={{ backgroundColor: \"rgb(95, 204, 95)\" }}\n                    onClick={this.goToRoom}>\n                    JOIN\n                </button>\n            </form >\n        )\n    }\n}\n\nexport default withRouter(JoinRoomForm);","import React from 'react';\nimport JoinRoomForm from '../Rooms/JoinRoom';\n\nclass Home extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            formShowing: false\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"main-page\">\n                <img\n                    src={process.env.PUBLIC_URL + 'logo.png'}\n                    className=\"logo\"\n                    alt=\"Chicken Tinder Icon\"\n                    onClick={() => this.setState({ formShowing: false })}\n                />\n                <div>\n                    {this.state.formShowing ?\n                        <JoinRoomForm /> :\n                        <div>\n                            <button\n                                className=\"pop-up\"\n                                onTouchStart=\"\"\n                                onClick={e => {\n                                    this.props.history.push(\"/create\");\n                                }}>\n                                CREATE ROOM\n                            </button>\n                            <button onTouchStart=\"\" onClick={() => this.setState({ formShowing: true })}>\n                                JOIN ROOM\n                            </button>\n                        </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowAltCircleLeft } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from 'react-router-dom';\n\nfunction PageNotFound() {\n    return (\n        <div className=\"main-page\">\n            <h2>Page Not Found</h2>\n            <Link to=\"/\">\n                <FontAwesomeIcon icon={faArrowAltCircleLeft} size=\"2x\" />\n            </Link>\n        </div>\n    );\n}\n\nfunction RoomNotFound() {\n    return (\n        <div className=\"main-page\">\n            <h2>Room Not Found</h2>\n            <p>Please make sure you've entered a valid room ID in the URL   </p>\n            <Link to=\"/\">\n                <FontAwesomeIcon icon={faArrowAltCircleLeft} size=\"2x\" />\n            </Link>\n        </div>\n    );\n}\n\nexport { PageNotFound, RoomNotFound };","import React from 'react';\n\nclass RadiusButtons extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            active: 1\n        }\n    }\n\n    _handleClick(radius) {\n        this.setState({ active: radius });\n        var updateRadius = this.props.updateRadius;\n        updateRadius(radius);\n    }\n\n    render() {\n        const buttonStyle = {\n            width: \"27%\",\n            display: \"inline-block\",\n            fontSize: \"small\",\n            backgroundColor: \"#b6b6b6\"\n        };\n        const buttonActiveStyle = {\n            width: \"27%\",\n            display: \"inline-block\",\n            fontSize: \"small\",\n            fontWeight: \"bolder\",\n            backgroundColor: \"#858585\",\n            boxShadow: \"0 0px rgba(153, 153, 153, 0.24)\",\n            transform: \"translateY(1px)\"\n        }\n        return (\n            <div style={{ paddingBottom: \"20px\", paddingTop: \"20px\" }}>\n                <button\n                    onTouchStart=\"\"\n                    onClick={this._handleClick.bind(this, 1)}\n                    style={this.state.active === 1 ? buttonActiveStyle : buttonStyle}>\n                    1KM\n                </button>\n                <button\n                    onTouchStart=\"\"\n                    onClick={this._handleClick.bind(this, 2)}\n                    style={this.state.active === 2 ? buttonActiveStyle : buttonStyle}>\n                    2KM\n                </button>\n                <button\n                    onTouchStart=\"\"\n                    onClick={this._handleClick.bind(this, 5)}\n                    style={this.state.active === 5 ? buttonActiveStyle : buttonStyle}>\n                    5KM\n                </button>\n            </div >\n        )\n    }\n}\n\nexport default RadiusButtons;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLocationArrow } from '@fortawesome/free-solid-svg-icons';\nimport RadiusButtons from './RadiusButtons';\nimport LoadingOverlay from 'react-loading-overlay';\nimport BeatLoader from 'react-spinners/BeatLoader'\n// import { socket } from '../../App';\n\nlet expressServer = process.env.REACT_APP_EXPRESS_SERVER;\nlet googleKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\nclass CreateRoom extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentCity: 'Retrieving Location...',\n            longitude: 0,\n            latitude: 0,\n            locationRetrieved: false,\n            radius: 1,\n            loading: false\n        };\n        this.createJoinRoom = this.createJoinRoom.bind(this);\n        this.goToRoom = this.goToRoom.bind(this);\n        this.updateRadius = this.updateRadius.bind(this);\n    }\n\n    updateRadius(radius) {\n        this.setState({ radius: radius });\n    }\n\n    componentDidMount() {\n        // let socket = this.props.socket;\n        let parentThis = this;\n\n        // if (\"geolocation\" in navigator) {\n        //     // check if geolocation is supported/enabled on current browser\n        //     navigator.geolocation.getCurrentPosition().then(\n        //         (position) => {\n        //             let state = {\n        //                 longitude: position.coords.longitude,\n        //                 latitude: position.coords.latitude,\n        //                 currentCity: \"Coordinates Retrieved...\"\n        //             }\n        //             this.setState(state);\n        //         }\n        //     );\n        // } else {\n        //     // geolocation is not supported\n        //     parentThis.setState({ currentCity: \"Browser did not provide location\" });\n        //     console.log('geolocation is not enabled on this browser');\n        //     fetch(\"https://www.googleapis.com/geolocation/v1/geolocate?key=\" + googleKey, {\n        //         method: \"POST\",\n        //         headers: {\n        //             Accept: 'application/json',\n        //             'Content-Type': 'application/json',\n        //         }\n        //     }).then(geolocationResult => {\n        //         if (geolocationResult.status === 200) {\n        //             return geolocationResult.json();\n        //         } else {\n        //             parentThis.setState({ currentCity: \"Cannot get coordinates\" });\n        //             return Promise.reject(\"Google geolocation API cannot get coordinates\");\n        //         }\n        //     });\n        // }\n\n        fetch(\"https://www.googleapis.com/geolocation/v1/geolocate?key=\" + googleKey, {\n            method: \"POST\",\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            }\n        }).then(geolocationResult => {\n            if (geolocationResult.status === 200) {\n                return geolocationResult.json()\n            } else {\n                parentThis.setState({ currentCity: \"Cannot get coordinates\" });\n                return Promise.reject(\"Google geolocation API cannot get coordinates\");\n            }\n        }).then(geolocationResultJSON => {\n            let longitude = geolocationResultJSON.location.lng;\n            let latitude = geolocationResultJSON.location.lat;\n            let state = { longitude: longitude, latitude: latitude, currentCity: \"Coordinates Retrieved...\" }\n            parentThis.setState(state);\n            return fetch(expressServer + \"/api/location?longitude=\" + longitude + \"&latitude=\" + latitude, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }).then(geocodeResult => {\n            if (geocodeResult.status === 200) {\n                geocodeResult.json().then(geocodeResultJSON => {\n                    let state = { currentCity: geocodeResultJSON.long_name, locationRetrieved: true }\n                    parentThis.setState(state);\n                });\n            } else {\n                parentThis.setState({ currentCity: \"Cannot get location\" });\n                Promise.reject(\"Google geocoding API cannot get a location\");\n            }\n        }).catch(e => {\n            parentThis.setState({ currentCity: \"Cannot get location\" });\n            console.log(e);\n        });\n    }\n\n    createJoinRoom() {\n        let longitude = this.state.longitude;\n        let latitude = this.state.latitude;\n        let radius = this.state.radius;\n        let currentCity = this.state.currentCity;\n        this.setState({ loading: true });\n        fetch(expressServer + \"/api/create-room\", {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            // credentials: \"include\",\n            body: JSON.stringify({\n                longitude: longitude,\n                latitude: latitude,\n                radius: radius,\n                city: currentCity\n            })\n        }).then(result => {\n            if (result.status === 200) {\n                result.json().then(resultJSON => {\n                    let roomNumber = resultJSON.roomNumber;\n                    let roomURL = \"/rooms/\" + roomNumber;\n                    this.goToRoom(roomURL);\n                });\n            } else if (result.status === 404) {\n                alert(\"No restaurants found in your area. Try a larger radius.\");\n            } else {\n                alert(\"Unknown error. Server may be down.\");\n            }\n        }).catch(e => {\n            console.log(e);\n        });\n    }\n\n    goToRoom(roomURL) {\n        this.props.history.push(roomURL);\n    }\n\n    render() {\n        // let updateRadius = this.updateRadius;\n\n        return (\n            <LoadingOverlay\n                active={this.state.loading}\n                spinner={<BeatLoader />}\n                text='Creating Room...'\n            >\n                <div className=\"main-page\">\n                    <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n                    <h2> Restaurants Near </h2>\n                    <div>\n                        <FontAwesomeIcon icon={faLocationArrow} size=\"xs\" />\n                        <h4 style={{ display: \"inline-block\", margin: \"6px\" }}>{this.state.currentCity}</h4>\n                    </div>\n                    <RadiusButtons updateRadius={this.updateRadius.bind(this)} />\n                    <button\n                        onTouchStart=\"\"\n                        disabled={!this.state.locationRetrieved}\n                        onClick={this.createJoinRoom}>\n                        CREATE\n                </button>\n                </div>\n            </LoadingOverlay>\n\n        )\n    }\n}\n\nexport default CreateRoom;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLocationArrow } from '@fortawesome/free-solid-svg-icons';\n\nclass Lobby extends React.Component {\n    constructor(props) {\n        super(props);\n        let roomNumber = this.props.match.params.roomNumber;\n        this.state = {\n            city: \"Retrieving...\",\n            roomNumber: roomNumber,\n            participants: []\n        }\n        this.joinRoom = this.joinRoom.bind(this);\n        this.updateStateInfo = this.updateStateInfo.bind(this);\n        this.startSwiping = this.startSwiping.bind(this);\n    }\n\n    componentDidMount() {\n        let socket = this.props.socket;\n        this.joinRoom(this.state.roomNumber);\n        let parentThis = this;\n\n        // Listen on new user joining room\n        socket.on('room info', function (result) {\n            parentThis.updateStateInfo(result);\n        });\n\n        // Listen on whether joined invalid room\n        socket.on('general error', () => {\n            parentThis.props.history.push(\"/rooms\");\n        });\n\n        // Listen on user disconnect\n        socket.on('user disconnect', (result) => {\n            parentThis.updateStateInfo(result);\n        });\n\n        // Listen on attempting to join an already active room\n        socket.on('room active', () => {\n            alert(\"Room \" + this.state.roomNumber + \" has already begun swiping!\");\n            parentThis.props.history.push(\"/\");\n        });\n\n        // Listen on room started swiping\n        socket.on('room started swiping', () => {\n            parentThis.props.history.push('/swiping', { roomNumber: this.state.roomNumber });\n        });\n    }\n\n    updateStateInfo(result) {\n        let data = JSON.parse(result);\n        // Set participants\n        let participantsObjectArray = data.participants;\n        let participantsArray = [];\n        for (let i = 0; i < participantsObjectArray.length; i++) {\n            participantsArray.push(participantsObjectArray[i].socketID)\n        }\n        this.setState({ participants: participantsArray });\n        // Set city\n        this.setState({ city: data.city });\n        // Set radius\n        this.setState({ radius: data.radius });\n    }\n\n    joinRoom(roomNumber) {\n        let socket = this.props.socket;\n        socket.emit('room', roomNumber);\n    }\n\n    startSwiping() {\n        let socket = this.props.socket;\n        socket.emit('initiate swiping');\n    }\n\n    render() {\n        return (\n            <div className=\"main-page\">\n                <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n                <h2> Room {this.state.roomNumber} </h2>\n                <div style={{ paddingTop: \"5px\", paddingBottom: \"5px\" }}>\n                    <h4> Looking for restaurants in</h4>\n                    <FontAwesomeIcon icon={faLocationArrow} size=\"xs\" />\n                    <h4 style={{ display: \"inline-block\", margin: \"2px\" }}>{this.state.city}</h4>\n                    <h4 style={{ padding: \"0px\" }}>\n                        {this.state.radius ? \"(\" + this.state.radius + \"KM radius)\" : \"\"}\n                    </h4>\n                </div>\n                <h4>\n                    {this.state.participants.length} user{(this.state.participants.length === 1) ? \"\" : \"s\"} in this room\n                </h4>\n\n                {/* TODO: DISABLE WHEN NOT ENTERED ROOM FULLY */}\n                <button\n                    onTouchStart=\"\"\n                    onClick={this.startSwiping}>\n                    EVERYONE IS IN\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Lobby;","import React, { useState } from 'react';\nimport './TinderCard.css';\nimport TinderCard from 'react-tinder-card'\n\nconst db = [\n    {\n        name: 'Richard Hendricks',\n        url: './img/richard.jpg'\n    },\n    {\n        name: 'Erlich Bachman',\n        url: './img/erlich.jpg'\n    },\n    {\n        name: 'Monica Hall',\n        url: './img/monica.jpg'\n    },\n    {\n        name: 'Jared Dunn',\n        url: './img/jared.jpg'\n    },\n    {\n        name: 'Dinesh Chugtai',\n        url: './img/dinesh.jpg'\n    }\n]\n\nfunction TinderCardComponent() {\n    const characters = db;\n    const [lastDirection, setLastDirection] = useState();\n\n    const swiped = (direction, nameToDelete) => {\n        console.log('removing: ' + nameToDelete)\n        setLastDirection(direction)\n    }\n\n    const outOfFrame = (name) => {\n        console.log(name + ' left the screen!')\n    }\n\n    return (\n        <div>\n            {/* <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n            <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' /> */}\n            <h1>React Tinder Card</h1>\n            <div className='cardContainer'>\n                {characters.map((character) =>\n                    <TinderCard\n                        className='swipe'\n                        key={character.name}\n                        onSwipe={(dir) => swiped(dir, character.name)}\n                        onCardLeftScreen={() => outOfFrame(character.name)}\n                        preventSwipe={['up', 'down']}>\n                        <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\n                            <h3>{character.name}</h3>\n                        </div>\n                    </TinderCard>\n                )}\n            </div>\n            {lastDirection ? <h2 className='infoText'>You swiped {lastDirection}</h2> :\n                <h2 className='infoText'>No direction swiped</h2>}\n        </div >\n    );\n}\n\nexport default TinderCardComponent;","import React from 'react';\nimport './Swiping.css';\nimport TinderCard from 'react-tinder-card';\n\nlet expressServer = process.env.REACT_APP_EXPRESS_SERVER;\n\nclass Swiping extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            restaurants: [],\n        };\n        // this.createJoinRoom = this.createJoinRoom.bind(this);\n        // this.goToRoom = this.goToRoom.bind(this);\n    }\n    // const db = this.state.restaurants;\n\n    swiped(direction, placeID) {\n        if (direction === \"right\") {\n            let socket = this.props.socket;\n            socket.emit(\"swipe right\", placeID);\n            console.log('removing: ' + placeID + ' after swiping ' + direction);\n        }\n    }\n\n    outOfFrame(name) {\n        console.log(name + ' left the screen!')\n    }\n\n    componentDidMount() {\n        let socket = this.props.socket;\n        let parentThis = this;\n        if (!this.props.location.state.roomNumber) {\n            this.props.history.push('/');\n        }\n        let roomNumber = this.props.location.state.roomNumber;\n        fetch(expressServer + \"/api/rooms/?roomNumber=\" + roomNumber, {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(result => {\n            if (result.status === 200) {\n                result.json().then(resultJSON => {\n                    console.log(resultJSON);\n                    let restaurants = resultJSON.restaurants;\n                    parentThis.setState({ restaurants: restaurants });\n                });\n            } else if (result.status === 404) {\n                alert(\"Server error. This room could not be found.\");\n                parentThis.props.history.push('/');\n            } else {\n                alert(\"Unknown error. Server may be down.\");\n                parentThis.props.history.push('/');\n            }\n        }).catch(e => {\n            console.log(e);\n        });\n\n        // Listen for errors\n        socket.on('general error', (errMsg) => {\n            alert(errMsg);\n            parentThis.props.history.push(\"/rooms\");\n        });\n\n        // Listen for matches\n        socket.on('match found', (placeID) => {\n            let restaurantName;\n            for (let i = 0; i < this.state.restaurants.length; i++) {\n                if (this.state.restaurants[i].placeID === placeID) {\n                    restaurantName = this.state.restaurants[i].name;\n                    break;\n                }\n            }\n            alert(\"You all liked \" + restaurantName + \"!\");\n        });\n\n        // Listen on user disconnect\n        socket.on('user disconnect', () => {\n            alert(\"A user swiping in your room has disconnected!\");\n        });\n    }\n\n    render() {\n\n        return (\n            <div>\n                <div className='cardContainer'>\n                    {this.state.restaurants.map((restaurant) =>\n                        <TinderCard\n                            className='swipe'\n                            key={restaurant.name}\n                            onSwipe={(dir) => this.swiped(dir, restaurant.placeID)}\n                            onCardLeftScreen={() => this.outOfFrame(restaurant.name)}\n                            preventSwipe={['up', 'down']}>\n                            <div style={{ backgroundImage: 'url(' + restaurant.photoURL + ')' }} className='card'>\n                                <h3>{restaurant.name}</h3>\n                            </div>\n                        </TinderCard>\n                    )}\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default Swiping;","import React from 'react';\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport Home from './components/Home/Home';\nimport { RoomNotFound, PageNotFound } from './components/NotFound/NotFound';\nimport CreateRoom from './components/Rooms/CreateRoom';\nimport Lobby from './components/Rooms/Lobby';\nimport './App.css';\nimport io from 'socket.io-client';\nimport TinderCardComponent from './components/TinderCard/TinderCard';\nimport Swiping from './components/Swiping/Swiping';\n\nlet expressServer = process.env.REACT_APP_EXPRESS_SERVER;\nlet socket = io.connect(expressServer, {\n  reconnection: false\n});\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/rooms/:roomNumber\" render={(props) => (<Lobby {...props} socket={socket} />)} />\n            <Route exact path='/' component={Home} />\n            <Route exact path='/create' render={(props) => (<CreateRoom {...props} socket={socket} />)} />\n            <Route exact path='/swiping' render={(props) => (<Swiping {...props} socket={socket} />)} />\n            <Route exact path=\"/rooms\" component={RoomNotFound} />\n            <Route exact path=\"/test\" component={TinderCardComponent} />\n            <Route component={PageNotFound} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport { App, socket };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}