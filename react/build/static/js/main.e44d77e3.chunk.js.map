{"version":3,"sources":["components/Rooms/JoinRoom.js","components/Home/Home.js","components/NotFound/NotFound.js","components/Rooms/RadiusButtons.js","components/Rooms/CreateRoom.js","components/Rooms/Lobby.js","App.js","serviceWorker.js","index.js"],"names":["JoinRoomForm","props","state","roomNumber","handleChange","bind","goToRoom","event","this","setState","target","value","roomURL","history","push","onSubmit","submit","ref","node","setWrapperRef","className","type","placeholder","onChange","required","maxLength","pattern","onTouchStart","style","backgroundColor","onClick","React","Component","withRouter","Home","formShowing","src","alt","JoinRoom","e","PageNotFound","to","icon","faArrowAltCircleLeft","size","RoomNotFound","RadiusButtons","active","radius","updateRadius","buttonStyle","width","display","fontSize","buttonActiveStyle","fontWeight","boxShadow","transform","paddingBottom","paddingTop","_handleClick","expressServer","process","CreateRoom","currentCity","longitude","latitude","locationRetrieved","createJoinRoom","socket","parentThis","on","data","console","log","fetch","method","headers","Accept","then","geolocationResult","status","json","Promise","reject","geolocationResultJSON","location","lng","lat","geocodeResult","geocodeResultJSON","long_name","catch","body","JSON","stringify","city","result","resultJSON","href","rel","faLocationArrow","margin","disabled","Lobby","match","params","participants","joinRoom","updateStateInfo","parse","participantsObjectArray","participantsArray","i","length","socketID","emit","io","connect","reconnection","App","exact","path","render","component","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e44d77e3.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass JoinRoomForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            roomNumber: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.goToRoom = this.goToRoom.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ roomNumber: event.target.value });\n    }\n\n    goToRoom() {\n        let roomURL = \"/rooms/\" + this.state.roomNumber;\n        this.props.history.push(roomURL);\n    }\n\n    render() {\n        return (\n            < form onSubmit={this.submit} ref={(node) => this.setWrapperRef = node}>\n                <input className=\"pop-up\"\n                    type=\"text\"\n                    value={this.state.roomNumber}\n                    placeholder=\"Room Number\"\n                    onChange={this.handleChange}\n                    required\n                    maxLength=\"4\"\n                    pattern=\"[0-9]*\"\n                />\n                <button\n                    onTouchStart=\"\"\n                    style={{ backgroundColor: \"rgb(95, 204, 95)\" }}\n                    onClick={this.goToRoom}>\n                    JOIN\n                </button>\n            </form >\n        )\n    }\n}\n\nexport default withRouter(JoinRoomForm);","import React from 'react';\nimport JoinRoomForm from '../Rooms/JoinRoom';\n\nclass Home extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            formShowing: false\n        }\n    }\n\n\n    render() {\n        return (\n            <div className=\"main-page\">\n                <img\n                    src={process.env.PUBLIC_URL + 'logo.png'}\n                    className=\"logo\"\n                    alt=\"Chicken Tinder Icon\"\n                    onClick={() => this.setState({ formShowing: false })}\n                />\n                <div>\n                    {this.state.formShowing ?\n                        <JoinRoomForm /> :\n                        <div>\n                            <button\n                                className=\"pop-up\"\n                                onTouchStart=\"\"\n                                onClick={e => {\n                                    this.props.history.push(\"/create\");\n                                }}>\n                                CREATE ROOM\n                            </button>\n                            <button onTouchStart=\"\" onClick={() => this.setState({ formShowing: true })}>\n                                JOIN ROOM\n                            </button>\n                        </div>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowAltCircleLeft } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from 'react-router-dom';\n\nfunction PageNotFound() {\n    return (\n        <div className=\"main-page\">\n            <h2>Page Not Found</h2>\n            <Link to=\"/\">\n                <FontAwesomeIcon icon={faArrowAltCircleLeft} size=\"2x\" />\n            </Link>\n        </div>\n    );\n}\n\nfunction RoomNotFound() {\n    return (\n        <div className=\"main-page\">\n            <h2>Room Not Found</h2>\n            <p>Please make sure you've entered a valid room ID in the URL   </p>\n            <Link to=\"/\">\n                <FontAwesomeIcon icon={faArrowAltCircleLeft} size=\"2x\" />\n            </Link>\n        </div>\n    );\n}\n\nexport { PageNotFound, RoomNotFound };","import React from 'react';\n\nclass RadiusButtons extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            active: 1\n        }\n    }\n\n    _handleClick(radius) {\n        this.setState({ active: radius });\n        var updateRadius = this.props.updateRadius;\n        updateRadius(radius);\n    }\n\n    render() {\n        const buttonStyle = {\n            width: \"27%\",\n            display: \"inline-block\",\n            fontSize: \"small\",\n            backgroundColor: \"#b6b6b6\"\n        };\n        const buttonActiveStyle = {\n            width: \"27%\",\n            display: \"inline-block\",\n            fontSize: \"small\",\n            fontWeight: \"bolder\",\n            backgroundColor: \"#858585\",\n            boxShadow: \"0 0px rgba(153, 153, 153, 0.24)\",\n            transform: \"translateY(1px)\"\n        }\n        return (\n            <div style={{ paddingBottom: \"20px\", paddingTop: \"20px\" }}>\n                <button\n                    onTouchStart=\"\"\n                    onClick={this._handleClick.bind(this, 1)}\n                    style={this.state.active === 1 ? buttonActiveStyle : buttonStyle}>\n                    1KM\n                </button>\n                <button\n                    onTouchStart=\"\"\n                    onClick={this._handleClick.bind(this, 2)}\n                    style={this.state.active === 2 ? buttonActiveStyle : buttonStyle}>\n                    2KM\n                </button>\n                <button\n                    onTouchStart=\"\"\n                    onClick={this._handleClick.bind(this, 5)}\n                    style={this.state.active === 5 ? buttonActiveStyle : buttonStyle}>\n                    5KM\n                </button>\n            </div >\n        )\n    }\n}\n\nexport default RadiusButtons;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLocationArrow } from '@fortawesome/free-solid-svg-icons';\nimport RadiusButtons from './RadiusButtons';\n// import { socket } from '../../App';\n\nlet expressServer = process.env.REACT_APP_EXPRESS_SERVER;\nlet googleKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\nclass CreateRoom extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentCity: 'Retrieving Location...',\n            longitude: 0,\n            latitude: 0,\n            locationRetrieved: false,\n            radius: 1\n        };\n        this.createJoinRoom = this.createJoinRoom.bind(this);\n        this.goToRoom = this.goToRoom.bind(this);\n    }\n\n    updateRadius(radius) {\n        this.setState({ radius: radius });\n    }\n\n    componentDidMount() {\n        let socket = this.props.socket;\n        let parentThis = this;\n        socket.on('room info', function (data) {\n            console.log(data);\n        });\n\n        fetch(\"https://www.googleapis.com/geolocation/v1/geolocate?key=\" + googleKey, {\n            method: \"POST\",\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            }\n        }).then(geolocationResult => {\n            if (geolocationResult.status === 200) {\n                return geolocationResult.json()\n            } else {\n                parentThis.setState({ currentCity: \"Cannot get coordinates\" });\n                return Promise.reject(\"Google geolocation API cannot get coordinates\");\n            }\n        }).then(geolocationResultJSON => {\n            let longitude = geolocationResultJSON.location.lng;\n            let latitude = geolocationResultJSON.location.lat;\n            let state = { longitude: longitude, latitude: latitude, currentCity: \"Coordinates Retrieved...\" }\n            parentThis.setState(state);\n            return fetch(expressServer + \"/api/location?longitude=\" + longitude + \"&latitude=\" + latitude, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }).then(geocodeResult => {\n            if (geocodeResult.status === 200) {\n                geocodeResult.json().then(geocodeResultJSON => {\n                    let state = { currentCity: geocodeResultJSON.long_name, locationRetrieved: true }\n                    parentThis.setState(state);\n                });\n            } else {\n                parentThis.setState({ currentCity: \"Cannot get location\" });\n                Promise.reject(\"Google geocoding API cannot get a location\");\n            }\n        }).catch(e => {\n            parentThis.setState({ currentCity: \"Cannot get location\" });\n            console.log(e);\n        });\n    }\n\n    createJoinRoom() {\n        let longitude = this.state.longitude;\n        let latitude = this.state.latitude;\n        let radius = this.state.radius;\n        let currentCity = this.state.currentCity;\n        fetch(expressServer + \"/api/create-room\", {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            // credentials: \"include\",\n            body: JSON.stringify({\n                longitude: longitude,\n                latitude: latitude,\n                radius: radius,\n                city: currentCity\n            })\n        }).then(result => {\n            if (result.status === 200) {\n                result.json().then((resultJSON) => {\n                    console.log(resultJSON)\n                    let roomNumber = resultJSON.roomNumber;\n                    let roomURL = \"/rooms/\" + roomNumber;\n                    this.goToRoom(roomURL);\n                });\n            }\n        }).catch(e => {\n            console.log(e);\n        });\n    }\n\n    goToRoom(roomURL) {\n        this.props.history.push(roomURL);\n    }\n\n\n    render() {\n        let updateRadius = this.updateRadius;\n\n        return (\n            <div className=\"main-page\">\n                <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n                <h2> Restaurants Near </h2>\n                <div>\n                    <FontAwesomeIcon icon={faLocationArrow} size=\"xs\" />\n                    <h4 style={{ display: \"inline-block\", margin: \"6px\" }}>{this.state.currentCity}</h4>\n                </div>\n                <RadiusButtons updateRadius={updateRadius.bind(this)} />\n                <button\n                    onTouchStart=\"\"\n                    disabled={!this.state.locationRetrieved}\n                    onClick={this.createJoinRoom}>\n                    CREATE\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default CreateRoom;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLocationArrow } from '@fortawesome/free-solid-svg-icons';\n\nclass Lobby extends React.Component {\n    constructor(props) {\n        super(props);\n        let roomNumber = this.props.match.params.roomNumber;\n        this.state = {\n            city: \"Retrieving...\",\n            roomNumber: roomNumber,\n            participants: []\n        }\n        this.joinRoom = this.joinRoom.bind(this);\n        this.updateStateInfo = this.updateStateInfo.bind(this);\n    }\n\n    componentDidMount() {\n        let socket = this.props.socket;\n        this.joinRoom(this.state.roomNumber);\n        let parentThis = this;\n\n        // Check if joined valid room\n        socket.on('room info', function (result) {\n            // let data = JSON.parse(result);\n            // // Set participants\n            // let participantsObjectArray = data.participants;\n            // let participantsArray = [];\n            // for (let i = 0; i < participantsObjectArray.length; i++) {\n            //     participantsArray.push(participantsObjectArray[i].socketID)\n            // }\n            // parentThis.setState({ participants: participantsArray });\n            // // Set city\n            // parentThis.setState({ city: data.city });\n            parentThis.updateStateInfo(result);\n        });\n\n        // Check if joined invalid room\n        socket.on('error', () => {\n            parentThis.props.history.push(\"/rooms\");\n        });\n\n        socket.on('user disconnect', function (result) {\n            parentThis.updateStateInfo(result);\n        });\n    }\n\n    updateStateInfo(result) {\n        let data = JSON.parse(result);\n        // Set participants\n        let participantsObjectArray = data.participants;\n        let participantsArray = [];\n        for (let i = 0; i < participantsObjectArray.length; i++) {\n            participantsArray.push(participantsObjectArray[i].socketID)\n        }\n        this.setState({ participants: participantsArray });\n        // Set city\n        this.setState({ city: data.city });\n    }\n\n    joinRoom(roomNumber) {\n        let socket = this.props.socket;\n        socket.emit('room', roomNumber);\n    }\n\n    render() {\n        return (\n            <div className=\"main-page\">\n                <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n                <h2> Room {this.state.roomNumber} </h2>\n                <div>\n                    <FontAwesomeIcon icon={faLocationArrow} size=\"xs\" />\n                    <h4 style={{ display: \"inline-block\", margin: \"6px\" }}>{this.state.city}</h4>\n                </div>\n                <h4> {this.state.participants.length} user(s) in this room </h4>\n                <button\n                    onTouchStart=\"\">\n                    EVERYONE IS IN\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Lobby;","import React from 'react';\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\n// import TinderCardComponent from './components/TinderCard/TinderCard';\nimport Home from './components/Home/Home';\nimport { RoomNotFound, PageNotFound } from './components/NotFound/NotFound';\nimport CreateRoom from './components/Rooms/CreateRoom';\nimport Lobby from './components/Rooms/Lobby';\nimport './App.css';\nimport io from 'socket.io-client';\n\nlet expressServer = process.env.REACT_APP_EXPRESS_SERVER;\nlet socket = io.connect(expressServer, {\n  reconnection: false\n});\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/rooms/:roomNumber\" render={(props) => (<Lobby {...props} socket={socket} />)} />\n            <Route exact path='/' component={Home} />\n            <Route exact path='/create' render={(props) => (<CreateRoom {...props} socket={socket} />)} />\n            <Route exact path=\"/rooms\" component={RoomNotFound} />\n            <Route component={PageNotFound} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport { App, socket };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}